git use：
//确定用户名和邮箱   创建一个仓库  具体命令在雨C的教程3里面
//git一直支持中文的
1.创建一个文件放到我的gitproject库里(repository head)
2.将文件添加到暂存区（stage index）
	git add README.md
3.将文件提交到Git仓库
	git commit -m "本次提交的说明"
	commit的意思是提交， -m选项后面是本次提交的说明，说明该版本的变动

4.查看工作区的状态
	git status
	nothing to commit 工作区是干净的，没有需要提交的版本
	Untracked files 未跟踪文件，文件一旦加入stage或者repository时git就可跟踪了
	changes to be commited:
	(use "git reset HEAD <file>.." to unstage)
	暂存区有可提交到仓库的文件，如果你反悔了可以使用 git reset HEAD把暂存区的文件退回到工作区，unstage就是 undo stage 取消暂存

	如果你的文件提交到了暂存区，后来你又更改了工作区的文件本身，那么git status时
	会提示：changes to be commited:
	（use "git add<file>..."to update what will be commited） 命令讲工作区文件覆盖就得暂存区
	（use "git checkout -- <file>..." to discard changes in working directory）命令将旧的暂存区覆盖到新的工作区（危险，相当于丢弃了修改）
5.add commit 一步到位的方法
	在commit时加上 -a即可   git commit -a -m"..." 缩写为 git commit -am "..."
6.回到过去的版本
	从暂存区回退到工作区的命令：checkout
	从仓库回退到暂存区的命令：reset
		__add______ __commit___
	   |		   |	       |
	工作区------>暂存区----->仓库
	   |_checkout__|___reset___|
	   
	git log命令查看历史提交：排序按时间从近到远 commit后面是每次提交生成的唯一ID 一般使用前5位就可以
7.回滚快照
	快照就是提交的版本，回滚快照就是回滚提交的版本
	HEAD表示最新提交的快照 HEAD~表示HEAD的上一个快照 HEAD~~表示山上个  HEAD~10表示上上...*10个快照
	git reset HEAD~ 就是将上一个快照变更成了最新快照，并将该快照回滚到了暂存区。
	
	在reset后面加上选项： --soft HEAD指向上一版本，而该版本不回滚到暂存区，相当于撤销最近一次的提交
						  --hard  HEAD指向上一版本，该版本回滚到暂存区，还原到了工作区。
						  
	总结：1.移动HEAD的指向（--soft）
		  2.将快照回滚到暂存区（[--mixed],默认）
		  3.将暂存区还原到工作目录（--hard）
		  
	回滚到指定快照：  git reset 12345  至少ID前5位
	回滚个别文件： 	  git reset 快照 文件名/路径
	回滚到未来（往前滚）：只要知道指定快照的ID号就能往前滚
	
	***查看各快照的ID（查看每次回滚或者操作的HEAD指向哪儿）：
	git reflog   并且关闭git 隔天再打开都可以用
8.版本内容比较
	直接执行 git diff命令是比较暂存区和工作区的文件内容：
	diff --git a/GitUse.txt b/GitUse.txt 表示对比的是存放在暂存区的GitUse.txt和放在工作区的GitUse.txt和放在工作区的GitUse
	index 323432..q324324 表示对应的暂存区版本ID和工作区版本ID
	+号的绿色部分是新有的内容  灰色内容是共有内容
	@@-1,20 +1,28@@表示旧文件从第一行开始显示，显示20行， 新文件从狄航开始显示，显示28行
	：表示页面太小显示不下可以使用移动命令
	
	***移动/跳转命令：
	下一行，上一行： j/k
	下一页，上一页：f/b
	下半页，下半页：d/u
	跳转到开头，结尾：g/G   先输入3在输入g表示去第三行
	
	在：后面输入q表示退出diff
	***搜索命令：	（在：后面的搜索）
	/<搜索的关键字>从当前位置向下搜索
	？<搜索的关键字>从当前位置向上搜索
	n跳到下一个匹配位置
	N跳到上一个匹配位置

	比较两个已经提交过的快照：
	git diff <快照的ID1 ID2>
	比较当前工作与仓库的快照：
	git diff <快照的ID>
	比较当前工作与仓库的最新快照：
	git diff HEAD
	比较暂存区与仓库最新快照：
	git diff  --cached
	比较暂存区与仓库指定快照：
	git diff  --cached <指定快照ID>
	
9.遇到乱码怎么办	
	如果遇到乱码，是windows不团结导致的，用世界通用的UTF-8 无BOM格式即可：
	使用Notepad++打开，文件-》转为UTF-8无BOM格式
10.修改上次提交版本的说明
	git commit --amend
11.删除文件
	如果自己在工作目录里误删了文件，可以打开git bash 查看状态， 然后用 checkout命令讲暂存区回滚到工作区
12.分支管理
	master分支是默认分支，主分支
	创建分支：git branch <分支名>  
	git log --decorate 显示当前版本处于哪个分支
	git log --oneline  log的精简版本  只显示一行主要的信息
	切换分支：git checkout <分支名>
	git log --graph --all 以图形化的形式显示分支的变化（很有意思很形象）
	
	
	hhh
	
	
	



	
	
	



	
	
	
